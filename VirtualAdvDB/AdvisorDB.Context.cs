//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VirtualAdvDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class VAS_2Entities : DbContext
    {
        public VAS_2Entities()
            : base("name=VAS_2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Class_List> Class_List { get; set; }
        public DbSet<Class_Review> Class_Review { get; set; }
        public DbSet<College> Colleges { get; set; }
        public DbSet<Internship> Internships { get; set; }
        public DbSet<Maj_Req> Maj_Req { get; set; }
        public DbSet<Major_Flowchart> Major_Flowchart { get; set; }
        public DbSet<Major> Majors { get; set; }
        public DbSet<Majors_by_University> Majors_by_University { get; set; }
        public DbSet<Majors_Code> Majors_Code { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<University> Universities { get; set; }
        public DbSet<University_Category> University_Category { get; set; }
        public DbSet<User_Classes> User_Classes { get; set; }
        public DbSet<User_Images> User_Images { get; set; }
        public DbSet<UserDetail> UserDetails { get; set; }
        public DbSet<UserImage> UserImages { get; set; }
    
        public virtual int addUserClass(string classID, string grade, string status, Nullable<int> rating, string review, Nullable<int> univID, Nullable<int> degreeID, string username)
        {
            var classIDParameter = classID != null ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var reviewParameter = review != null ?
                new ObjectParameter("Review", review) :
                new ObjectParameter("Review", typeof(string));
    
            var univIDParameter = univID.HasValue ?
                new ObjectParameter("UnivID", univID) :
                new ObjectParameter("UnivID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUserClass", classIDParameter, gradeParameter, statusParameter, ratingParameter, reviewParameter, univIDParameter, degreeIDParameter, usernameParameter);
        }
    
        public virtual ObjectResult<string> collegesByUniv(string uname)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("Uname", uname) :
                new ObjectParameter("Uname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("collegesByUniv", unameParameter);
        }
    
        public virtual ObjectResult<string> coursesByMajor(string majorName)
        {
            var majorNameParameter = majorName != null ?
                new ObjectParameter("majorName", majorName) :
                new ObjectParameter("majorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("coursesByMajor", majorNameParameter);
        }
    
        public virtual ObjectResult<string> majorsByCollege(string collegeName)
        {
            var collegeNameParameter = collegeName != null ?
                new ObjectParameter("collegeName", collegeName) :
                new ObjectParameter("collegeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("majorsByCollege", collegeNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddClass(string classCode, string className, string classDescription, Nullable<int> credits, Nullable<int> universityID, Nullable<int> collegeID, string cIP_Code)
        {
            var classCodeParameter = classCode != null ?
                new ObjectParameter("classCode", classCode) :
                new ObjectParameter("classCode", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("className", className) :
                new ObjectParameter("className", typeof(string));
    
            var classDescriptionParameter = classDescription != null ?
                new ObjectParameter("ClassDescription", classDescription) :
                new ObjectParameter("ClassDescription", typeof(string));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("Credits", credits) :
                new ObjectParameter("Credits", typeof(int));
    
            var universityIDParameter = universityID.HasValue ?
                new ObjectParameter("UniversityID", universityID) :
                new ObjectParameter("UniversityID", typeof(int));
    
            var collegeIDParameter = collegeID.HasValue ?
                new ObjectParameter("CollegeID", collegeID) :
                new ObjectParameter("CollegeID", typeof(int));
    
            var cIP_CodeParameter = cIP_Code != null ?
                new ObjectParameter("CIP_Code", cIP_Code) :
                new ObjectParameter("CIP_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClass", classCodeParameter, classNameParameter, classDescriptionParameter, creditsParameter, universityIDParameter, collegeIDParameter, cIP_CodeParameter);
        }
    
        public virtual int AddMajor(string majorName, string collegeName, string degreeTypes)
        {
            var majorNameParameter = majorName != null ?
                new ObjectParameter("MajorName", majorName) :
                new ObjectParameter("MajorName", typeof(string));
    
            var collegeNameParameter = collegeName != null ?
                new ObjectParameter("CollegeName", collegeName) :
                new ObjectParameter("CollegeName", typeof(string));
    
            var degreeTypesParameter = degreeTypes != null ?
                new ObjectParameter("DegreeTypes", degreeTypes) :
                new ObjectParameter("DegreeTypes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMajor", majorNameParameter, collegeNameParameter, degreeTypesParameter);
        }
    
        public virtual ObjectResult<sp_getImage_Result> sp_getImage(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getImage_Result>("sp_getImage", userNameParameter);
        }
    
        public virtual int updateUserDetail(string userName, Nullable<System.DateTime> dOB, string gender, string univName, string degreeName, string goal, string levelOfEd)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var univNameParameter = univName != null ?
                new ObjectParameter("UnivName", univName) :
                new ObjectParameter("UnivName", typeof(string));
    
            var degreeNameParameter = degreeName != null ?
                new ObjectParameter("DegreeName", degreeName) :
                new ObjectParameter("DegreeName", typeof(string));
    
            var goalParameter = goal != null ?
                new ObjectParameter("Goal", goal) :
                new ObjectParameter("Goal", typeof(string));
    
            var levelOfEdParameter = levelOfEd != null ?
                new ObjectParameter("LevelOfEd", levelOfEd) :
                new ObjectParameter("LevelOfEd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUserDetail", userNameParameter, dOBParameter, genderParameter, univNameParameter, degreeNameParameter, goalParameter, levelOfEdParameter);
        }
    }
}
